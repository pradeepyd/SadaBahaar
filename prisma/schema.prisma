// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id  @default(uuid())
  email       String @unique
  role        Role 
  provider    Provider
  streams     Stream[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  roomsCreated Room[] @relation("UserRoomsCreated")
}

model Room {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  streams   Stream[] @relation("RoomStreams")
  // Playback sync fields
  currentSongId String? 
  currentSong   Stream? @relation("CurrentSong", fields: [currentSongId], references: [id])
  currentSongStartedAt DateTime?
  creatorId String
  creator   User @relation("UserRoomsCreated", fields: [creatorId], references: [id])
}

model Stream {
   id            String @id  @default(uuid())
   type          Streamtype
   url           String
   title         String  @default("")
   thumbnail     String  @default("") 
   extractedId   String
   active        Boolean  @default(true)
   lastPlayedAt  DateTime?
   createdAt     DateTime @default(now())
   upvotes       Upvote[]
   downvotes     Downvote[]
   roomId        String
   room          Room @relation("RoomStreams", fields: [roomId], references: [id])
   userId        String
   user          User @relation(fields: [userId], references: [id])
   // For currentSong reverse relation
   currentSongOf Room[] @relation("CurrentSong")
}

model Upvote {
    id              String @id  @default(uuid())
    userId          String
    streamId        String 
    stream          Stream  @relation(fields: [streamId],references: [id])
    user            User  @relation(fields: [userId],references: [id])
    @@unique([userId,streamId])
}

model Downvote {
    id              String @id  @default(uuid())
    userId          String
    streamId        String 
    stream          Stream  @relation(fields: [streamId],references: [id])
    user            User  @relation(fields: [userId],references: [id])
    @@unique([userId,streamId])
}

enum Streamtype {
  Spotify
  Youtube
}

enum Provider {
  Google
}

enum Role {
  User
  Creator
}